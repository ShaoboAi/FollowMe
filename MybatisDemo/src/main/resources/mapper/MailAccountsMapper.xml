<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.pingnotes.mapper.MailAccountsMapper">
  <resultMap id="BaseResultMap" type="com.pingnotes.pojo.MailAccounts">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="mail_server_profile" jdbcType="INTEGER" property="mailServerProfile" />
    <result column="encrypted_mail_refresh_token" jdbcType="VARCHAR" property="encryptedMailRefreshToken" />
    <result column="encrypt_mail_access_token" jdbcType="VARCHAR" property="encryptMailAccessToken" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
    <result column="is_activate" jdbcType="BIT" property="isActivate" />
    <result column="is_register" jdbcType="BIT" property="isRegister" />
    <result column="nick_name" jdbcType="VARCHAR" property="nickName" />
    <result column="signature" jdbcType="VARCHAR" property="signature" />
    <result column="domain_username" jdbcType="VARCHAR" property="domainUsername" />
    <result column="domain_password" jdbcType="VARCHAR" property="domainPassword" />
    <result column="is_rush_signature" jdbcType="BIT" property="isRushSignature" />
    <result column="login_type" jdbcType="INTEGER" property="loginType" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, email, mail_server_profile, encrypted_mail_refresh_token, encrypt_mail_access_token, 
    created_at, updated_at, is_activate, is_register, nick_name, signature, domain_username, 
    domain_password, is_rush_signature, login_type
  </sql>
  <select id="selectByExample" parameterType="com.pingnotes.pojo.MailAccountsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from mail_accounts
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from mail_accounts
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from mail_accounts
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.pingnotes.pojo.MailAccountsExample">
    delete from mail_accounts
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.pingnotes.pojo.MailAccounts">
    insert into mail_accounts (id, email, mail_server_profile, 
      encrypted_mail_refresh_token, encrypt_mail_access_token, 
      created_at, updated_at, is_activate, 
      is_register, nick_name, signature, 
      domain_username, domain_password, is_rush_signature, 
      login_type)
    values (#{id,jdbcType=BIGINT}, #{email,jdbcType=VARCHAR}, #{mailServerProfile,jdbcType=INTEGER}, 
      #{encryptedMailRefreshToken,jdbcType=VARCHAR}, #{encryptMailAccessToken,jdbcType=VARCHAR}, 
      #{createdAt,jdbcType=TIMESTAMP}, #{updatedAt,jdbcType=TIMESTAMP}, #{isActivate,jdbcType=BIT}, 
      #{isRegister,jdbcType=BIT}, #{nickName,jdbcType=VARCHAR}, #{signature,jdbcType=VARCHAR}, 
      #{domainUsername,jdbcType=VARCHAR}, #{domainPassword,jdbcType=VARCHAR}, #{isRushSignature,jdbcType=BIT}, 
      #{loginType,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.pingnotes.pojo.MailAccounts">
    insert into mail_accounts
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="mailServerProfile != null">
        mail_server_profile,
      </if>
      <if test="encryptedMailRefreshToken != null">
        encrypted_mail_refresh_token,
      </if>
      <if test="encryptMailAccessToken != null">
        encrypt_mail_access_token,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="updatedAt != null">
        updated_at,
      </if>
      <if test="isActivate != null">
        is_activate,
      </if>
      <if test="isRegister != null">
        is_register,
      </if>
      <if test="nickName != null">
        nick_name,
      </if>
      <if test="signature != null">
        signature,
      </if>
      <if test="domainUsername != null">
        domain_username,
      </if>
      <if test="domainPassword != null">
        domain_password,
      </if>
      <if test="isRushSignature != null">
        is_rush_signature,
      </if>
      <if test="loginType != null">
        login_type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="mailServerProfile != null">
        #{mailServerProfile,jdbcType=INTEGER},
      </if>
      <if test="encryptedMailRefreshToken != null">
        #{encryptedMailRefreshToken,jdbcType=VARCHAR},
      </if>
      <if test="encryptMailAccessToken != null">
        #{encryptMailAccessToken,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="isActivate != null">
        #{isActivate,jdbcType=BIT},
      </if>
      <if test="isRegister != null">
        #{isRegister,jdbcType=BIT},
      </if>
      <if test="nickName != null">
        #{nickName,jdbcType=VARCHAR},
      </if>
      <if test="signature != null">
        #{signature,jdbcType=VARCHAR},
      </if>
      <if test="domainUsername != null">
        #{domainUsername,jdbcType=VARCHAR},
      </if>
      <if test="domainPassword != null">
        #{domainPassword,jdbcType=VARCHAR},
      </if>
      <if test="isRushSignature != null">
        #{isRushSignature,jdbcType=BIT},
      </if>
      <if test="loginType != null">
        #{loginType,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.pingnotes.pojo.MailAccountsExample" resultType="java.lang.Long">
    select count(*) from mail_accounts
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update mail_accounts
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.mailServerProfile != null">
        mail_server_profile = #{record.mailServerProfile,jdbcType=INTEGER},
      </if>
      <if test="record.encryptedMailRefreshToken != null">
        encrypted_mail_refresh_token = #{record.encryptedMailRefreshToken,jdbcType=VARCHAR},
      </if>
      <if test="record.encryptMailAccessToken != null">
        encrypt_mail_access_token = #{record.encryptMailAccessToken,jdbcType=VARCHAR},
      </if>
      <if test="record.createdAt != null">
        created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatedAt != null">
        updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.isActivate != null">
        is_activate = #{record.isActivate,jdbcType=BIT},
      </if>
      <if test="record.isRegister != null">
        is_register = #{record.isRegister,jdbcType=BIT},
      </if>
      <if test="record.nickName != null">
        nick_name = #{record.nickName,jdbcType=VARCHAR},
      </if>
      <if test="record.signature != null">
        signature = #{record.signature,jdbcType=VARCHAR},
      </if>
      <if test="record.domainUsername != null">
        domain_username = #{record.domainUsername,jdbcType=VARCHAR},
      </if>
      <if test="record.domainPassword != null">
        domain_password = #{record.domainPassword,jdbcType=VARCHAR},
      </if>
      <if test="record.isRushSignature != null">
        is_rush_signature = #{record.isRushSignature,jdbcType=BIT},
      </if>
      <if test="record.loginType != null">
        login_type = #{record.loginType,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update mail_accounts
    set id = #{record.id,jdbcType=BIGINT},
      email = #{record.email,jdbcType=VARCHAR},
      mail_server_profile = #{record.mailServerProfile,jdbcType=INTEGER},
      encrypted_mail_refresh_token = #{record.encryptedMailRefreshToken,jdbcType=VARCHAR},
      encrypt_mail_access_token = #{record.encryptMailAccessToken,jdbcType=VARCHAR},
      created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      is_activate = #{record.isActivate,jdbcType=BIT},
      is_register = #{record.isRegister,jdbcType=BIT},
      nick_name = #{record.nickName,jdbcType=VARCHAR},
      signature = #{record.signature,jdbcType=VARCHAR},
      domain_username = #{record.domainUsername,jdbcType=VARCHAR},
      domain_password = #{record.domainPassword,jdbcType=VARCHAR},
      is_rush_signature = #{record.isRushSignature,jdbcType=BIT},
      login_type = #{record.loginType,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.pingnotes.pojo.MailAccounts">
    update mail_accounts
    <set>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="mailServerProfile != null">
        mail_server_profile = #{mailServerProfile,jdbcType=INTEGER},
      </if>
      <if test="encryptedMailRefreshToken != null">
        encrypted_mail_refresh_token = #{encryptedMailRefreshToken,jdbcType=VARCHAR},
      </if>
      <if test="encryptMailAccessToken != null">
        encrypt_mail_access_token = #{encryptMailAccessToken,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="isActivate != null">
        is_activate = #{isActivate,jdbcType=BIT},
      </if>
      <if test="isRegister != null">
        is_register = #{isRegister,jdbcType=BIT},
      </if>
      <if test="nickName != null">
        nick_name = #{nickName,jdbcType=VARCHAR},
      </if>
      <if test="signature != null">
        signature = #{signature,jdbcType=VARCHAR},
      </if>
      <if test="domainUsername != null">
        domain_username = #{domainUsername,jdbcType=VARCHAR},
      </if>
      <if test="domainPassword != null">
        domain_password = #{domainPassword,jdbcType=VARCHAR},
      </if>
      <if test="isRushSignature != null">
        is_rush_signature = #{isRushSignature,jdbcType=BIT},
      </if>
      <if test="loginType != null">
        login_type = #{loginType,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.pingnotes.pojo.MailAccounts">
    update mail_accounts
    set email = #{email,jdbcType=VARCHAR},
      mail_server_profile = #{mailServerProfile,jdbcType=INTEGER},
      encrypted_mail_refresh_token = #{encryptedMailRefreshToken,jdbcType=VARCHAR},
      encrypt_mail_access_token = #{encryptMailAccessToken,jdbcType=VARCHAR},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      is_activate = #{isActivate,jdbcType=BIT},
      is_register = #{isRegister,jdbcType=BIT},
      nick_name = #{nickName,jdbcType=VARCHAR},
      signature = #{signature,jdbcType=VARCHAR},
      domain_username = #{domainUsername,jdbcType=VARCHAR},
      domain_password = #{domainPassword,jdbcType=VARCHAR},
      is_rush_signature = #{isRushSignature,jdbcType=BIT},
      login_type = #{loginType,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>